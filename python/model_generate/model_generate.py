import os

def clearFile(file_path):
    #Function that erases all lines in a file_path
    try:
        with open(file_path, 'w'):  # Open the file in write mode to truncate its contents
            pass  # No need to perform any write operation, as opening in 'w' mode truncates the file

        print(f"All lines erased from '{file_path}' successfully.")

    except FileNotFoundError:
        print("File not found. Please check the file path.")
    except Exception as e:
        print(f"An error occurred: {e}")

def generateArduPilotPlugin(systemId):
    #This funtion generates the correct ardupilot plugin given the system ID

    #Calculate the correct ports
    thisIn = 9002 + (systemId - 1)*10
    thisOut = 9003 + (systemId - 1)*10

    #Use the plugin template
    with open('./templates/ap_plugin_1', 'r') as file:
        plugin = file.readlines()

    plugin.append('\n      <fdm_addr>127.0.0.1</fdm_addr>\n')
    plugin.append('      <fdm_port_in>' + str(thisIn) + '</fdm_port_in>\n')
    plugin.append('      <fdm_port_out>' + str(thisOut) + '</fdm_port_out>\n')

    #Use the 2nd plugin template
    with open('./templates/ap_plugin_2', 'r') as file:
        footer = file.readlines()

    #Some formatting to add in the 2nd plugin template
    for lines in footer:
        plugin.append(lines)

    plugin = ''.join(plugin)

    return plugin

def generateRotorPlugin():

    with open('./templates/rotor_plugins', 'r') as file:
        plugin = file.readlines()

    plugin = ''.join(plugin)

    return plugin

def generateIrisInclude(templateDir):
    with open(templateDir + 'iris_with_standoffs', 'r') as file:
        vehicle = file.readlines()

    iris = ''.join(vehicle)

    return iris

def generateIrisDepend(templateDir):
    with open(templateDir + 'iris_depend', 'r') as file:
        vehicle = file.readlines()

    iris = ''.join(vehicle)

    return iris

def generateVehicleBase(vehicle,templateDir):
    if vehicle == 'iris':
        return generateIrisInclude(templateDir)
    else:
        return 'Did not specify a valid vehicle'

def generatePlugin(plugin, systemId):
    if plugin == 'arduPilot':
        return generateArduPilotPlugin(systemId)
    elif plugin == 'rotor':
        return generateRotorPlugin()
    else:
        return 'Did not specify a valid plugin'

def generateDepend(depend, templateDir):
    if depend == 'iris_depend':
        return generateIrisDepend(templateDir)
    else:
        return 'Did not specify a valid depend'

def generateConfig(systemId,modelDir,templateDir, depends):
    #Generate the model.config file

    #Set some variables we'll need
    configFile = modelDir + 'drone' + str(systemId) + '/' + 'model.config'
    
    #Erase all lines
    clearFile(configFile)

    #The following lines are common to all models
    with open(configFile, 'w') as file:
        file.write('<?xml version="1.0"?>\n\n')
        file.write('<model>\n')
        file.write('  <name>drone' + str(systemId) + '</name>\n')
        file.write('  <version>1.0</version>\n')
        file.write('  <sdf version="1.6">model.sdf</sdf>\n\n')
        file.write('  <author>\n')
        file.write('    <name>SwarmPlanner</name>\n')
        file.write('  </author>\n\n')
        file.write('  <description>\n')
        file.write('    Gazebo Model generated by SwarmPlanner\n')
        file.write('  </description>\n\n')
        file.write('  <depend>\n')

    #If there are dependencies, add them
    if(len(depends) > 0): 
        for depend in depends:
            with open(configFile, 'a') as file:
                file.write(generateDepend(depend,templateDir))

    #The following lines are common to all models
    with open(configFile, 'a') as file:
        file.write('  </depend>\n')
        file.write('</model>\n')

def generateModel(systemId,modelDir,templateDir,vehicle, plugins):
    #Generate the model.sdf file

    #Set some variables we'll need
    modelFile = modelDir + 'drone' + str(systemId) + '/' + 'model.sdf'
    modelName = '  <model name="drone' + str(systemId) + '">\n'
    vehicle = generateVehicleBase(vehicle,templateDir)
    plugList = []

    if(len(plugins) > 0): 
        #Add the plugins
        for plugin in plugins:
            plugList.append(plugin)

    
    #Erase all lines
    clearFile(modelFile)
    
    #The following lines are common to all models
    with open(modelFile, 'w') as file:
        file.write('<?xml version="1.0"?>\n')
        file.write('<sdf version="1.6">\n')
        file.write(modelName)
        file.write(vehicle)

    #If there are plugins, add them
    if(len(plugins) > 0): 
        for plug in plugList:
            with open(modelFile, 'a') as file:
                file.write(generatePlugin(plug,systemId))

    #The following lines are common to all models
    with open(modelFile, 'a') as file:
        file.write('  </model>\n')
        file.write('</sdf>\n')

def generateVehicleModel(systemId,modelDir,templateDir,vehicle,plugins):
    #Generate the vehicle model

    #Set some variables we'll need
    vehicleDir = modelDir + 'drone' + str(systemId) + '/' #Where sdf and config are
    configFile = vehicleDir + 'model.config'
    modelFile = vehicleDir + 'model.sdf'
    depends = []

    if vehicle == 'iris':
        depends.append('iris_depend')

    #Create the directory
    try:
        os.mkdir(vehicleDir)
    except OSError:
        print ("Creation of the directory %s failed" % vehicleDir)
    else:
        print ("Successfully created the directory %s " % vehicleDir)

    #Generate the model.config file
    generateConfig(systemId,modelDir,templateDir,depends)

    #Generate the model.sdf file
    generateModel(systemId,modelDir,templateDir,vehicle,plugins)


# generateModel(1,'./','./templates/','iris',['rotor','arduPilot'])
# generateConfig(1,'./','./templates/',['iris_depend'])

generateVehicleModel(4,'./','./templates/','iris',['rotor','arduPilot'])